{
    parserClass='io.sarl.intellij.parser.SarlParser'
    parserUtilClass='io.sarl.intellij.parser.SarlParserUtil'

    elementTypeHolderClass='io.sarl.intellij.psi.SarlElementTypes'

    psiClassPrefix='Sarl'
    psiImplClassSuffix='Impl'
    psiPackage='io.sarl.intellij.psi'
    psiImplPackage='io.sarl.intellij.psi.impl'

    tokens=[
        LBRACE      =  '{'
        RBRACE      =  '}'
        LBRACK      =  '['
        RBRACK      =  ']'
        LPAREN      =  '('
        RPAREN      =  ')'
        COLON       =  ':'
        COLONCOLON  =  '::'
        SEMICOLON   =  ';'
        COMMA       =  ','
        EQ          =  '='
        EXCLEQ      =  '!='
        EQEQ        =  '=='
        SHA         =  '#'
        EXCL        =  '!'
        PLUSEQ      =  '+='
        PLUS        =  '+'
        MINUSEQ     =  '-='
        MINUS       =  '-'
        OREQ        =  '|='
        ANDAND      =  '&&'
        ANDEQ       =  '&='
        AND         =  '&'
        OR          =  '|'
        LT          =  '<'
        XOREQ       =  '^='
        XOR         =  '^'
        MULEQ       =  '*='
        MUL         =  '*'
        DIVEQ       =  '/='
        DIV         =  '/'
        REMEQ       =  '%='
        REM         =  '%'
        GT          =  '>'
        DOT         =  '.'
        DOTDOT      =  '..'
        DOTDOTDOT   =  '...'
        DOTDOTEQ    =  '..='
        FAT_ARROW   =  '=>'
        ARROW       =  '->'
        Q           =  '?'
        AT          =  '@'
        UNDERSCORE  =  '_'
        DOLLAR = '$'

        documentation_block='regexp:/\*\*(.|\n)*\*/'
        line_comment='regexp:(//.*|/\*.*\*/)'
        block_comment='regexp:/\*(.|\n)*\*/'

        space='regexp:\s+'

        id='regexp:\p{Alpha}\w*'
        number='regexp:\d+(\.\d*)?'
        string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
    ]

    name(".*expr")='expression'
    extends(".*expr")=expr
}

root ::= root_item *
private root_item ::= !<<eof>> property ';' {pin=1 recoverWhile=property_recover}

property ::= id '=' expr  {pin=2}
private property_recover ::= !(';' | id '=')

expr ::= factor plus_expr *
left plus_expr ::= plus_op factor
private plus_op ::= '+'|'-'
private factor ::= primary mul_expr *
left mul_expr  ::= mul_op primary
private mul_op ::= '*'|'/'
private primary ::= primary_inner factorial_expr ?
left factorial_expr ::= '!'
private primary_inner ::= literal_expr | ref_expr | paren_expr
paren_expr ::= '(' expr ')' {pin=1}
ref_expr ::= id
literal_expr ::= number | string | float