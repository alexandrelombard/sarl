/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.util

import java.util.Arrays
import java.util.UUID

import io.sarl.lang.core.Address
import io.sarl.lang.core.Scope

/**
 * Scope using {@link Address} for EventSpace's.
 *
 * @author $Author: srodriguez$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.6
 * @deprecated since 0.7, replaced by closure expressions.
 */
@Deprecated
class IdentifierScope implements Scope<Address> {

	static val SCOPE_ID = "id://"

	static val NO_IDENTIFIER : UUID[] = newArrayOfSize(0)

	val identifiers : UUID[]

	/**
	 * @param ids identifiers to put in the scope.
	 */
	new (ids : UUID*) {
		if (ids === null) {
			this.identifiers = NO_IDENTIFIER
		} else {
			this.identifiers = ids
		}
	}

	/** Replies the identifiers that are matched by this scope.
	 *
	 * @return the identifiers.
	 */
	def getIdentifiers : UUID[] {
		this.identifiers
	}

	override toString : String {
		SCOPE_ID + Arrays::toString(this.identifiers)
	}

	override matches(address : Address) : boolean {
		assert address !== null
		for (element : this.identifiers) {
			if (element == address.UUID) {
				return true
			}
		}
		return false
	}

}

