/*
 * $Id$
 *
 * File is automatically generated by the Xtext language generator.
 * Do not change it.
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.lang.idea.lang.parser.antlr;

import java.io.*;

import org.eclipse.xtext.parser.antlr.IAntlrTokenFileProvider;

public class SARLAntlrTokenFileProvider implements IAntlrTokenFileProvider {

	private final String fileContent = "'!'=73\n"+
			"'!='=116\n"+
			"'!=='=118\n"+
			"'#'=106\n"+
			"'%'=71\n"+
			"'%='=111\n"+
			"'&&'=114\n"+
			"'&'=144\n"+
			"'('=49\n"+
			"')'=50\n"+
			"'*'=59\n"+
			"'**'=72\n"+
			"'*='=109\n"+
			"'+'=75\n"+
			"'++'=125\n"+
			"'+='=107\n"+
			"','=32\n"+
			"'-'=74\n"+
			"'--'=126\n"+
			"'-='=108\n"+
			"'->'=120\n"+
			"'.'=77\n"+
			"'..'=122\n"+
			"'..<'=121\n"+
			"'/'=70\n"+
			"'/='=110\n"+
			"':'=46\n"+
			"'::'=127\n"+
			"';'=26\n"+
			"'<'=40\n"+
			"'<>'=123\n"+
			"'='=47\n"+
			"'=='=115\n"+
			"'==='=117\n"+
			"'=>'=76\n"+
			"'>'=41\n"+
			"'>='=112\n"+
			"'?'=143\n"+
			"'?.'=128\n"+
			"'?:'=124\n"+
			"'@'=105\n"+
			"'AFTER'=93\n"+
			"'BEFORE'=94\n"+
			"'ELSE'=102\n"+
			"'ELSEIF'=104\n"+
			"'ENDFOR'=100\n"+
			"'ENDIF'=103\n"+
			"'FOR'=99\n"+
			"'IF'=101\n"+
			"'SEPARATOR'=95\n"+
			"'['=55\n"+
			"']'=56\n"+
			"'abstract'=81\n"+
			"'agent'=33\n"+
			"'annotation'=44\n"+
			"'artifact'=38\n"+
			"'as'=67\n"+
			"'assert'=62\n"+
			"'assume'=63\n"+
			"'behavior'=34\n"+
			"'break'=60\n"+
			"'capacity'=31\n"+
			"'case'=98\n"+
			"'catch'=142\n"+
			"'class'=39\n"+
			"'continue'=61\n"+
			"'create'=92\n"+
			"'def'=90\n"+
			"'default'=69\n"+
			"'dispatch'=83\n"+
			"'do'=132\n"+
			"'else'=130\n"+
			"'enum'=43\n"+
			"'event'=27\n"+
			"'extends'=28\n"+
			"'extension'=45\n"+
			"'false'=134\n"+
			"'final'=84\n"+
			"'finally'=141\n"+
			"'fires'=53\n"+
			"'for'=66\n"+
			"'if'=129\n"+
			"'implements'=36\n"+
			"'import'=96\n"+
			"'instanceof'=119\n"+
			"'interface'=42\n"+
			"'native'=86\n"+
			"'new'=48\n"+
			"'null'=136\n"+
			"'on'=54\n"+
			"'override'=91\n"+
			"'package'=25\n"+
			"'private'=79\n"+
			"'protected'=80\n"+
			"'public'=78\n"+
			"'requires'=58\n"+
			"'return'=139\n"+
			"'skill'=35\n"+
			"'space'=37\n"+
			"'static'=82\n"+
			"'strictfp'=85\n"+
			"'super'=133\n"+
			"'switch'=68\n"+
			"'synchronized'=88\n"+
			"'throw'=138\n"+
			"'throws'=51\n"+
			"'transient'=89\n"+
			"'true'=135\n"+
			"'try'=140\n"+
			"'typeof'=137\n"+
			"'uses'=57\n"+
			"'val'=65\n"+
			"'var'=64\n"+
			"'volatile'=87\n"+
			"'while'=131\n"+
			"'with'=52\n"+
			"'{'=29\n"+
			"'|'=97\n"+
			"'||'=113\n"+
			"'}'=30\n"+
			"RULE_ANY_OTHER=24\n"+
			"RULE_COMMENT_RICH_TEXT_END=11\n"+
			"RULE_COMMENT_RICH_TEXT_INBETWEEN=9\n"+
			"RULE_DECIMAL=14\n"+
			"RULE_HEX=12\n"+
			"RULE_HEX_DIGIT=18\n"+
			"RULE_ID=5\n"+
			"RULE_IDENTIFIER_PART=17\n"+
			"RULE_IDENTIFIER_PART_IMPL=20\n"+
			"RULE_IDENTIFIER_START=15\n"+
			"RULE_INT=13\n"+
			"RULE_IN_RICH_STRING=19\n"+
			"RULE_ML_COMMENT=21\n"+
			"RULE_RICH_TEXT=6\n"+
			"RULE_RICH_TEXT_END=10\n"+
			"RULE_RICH_TEXT_INBETWEEN=8\n"+
			"RULE_RICH_TEXT_START=7\n"+
			"RULE_SL_COMMENT=22\n"+
			"RULE_STRING=4\n"+
			"RULE_UNICODE_ESCAPE=16\n"+
			"RULE_WS=23\n"+
			"T__100=100\n"+
			"T__101=101\n"+
			"T__102=102\n"+
			"T__103=103\n"+
			"T__104=104\n"+
			"T__105=105\n"+
			"T__106=106\n"+
			"T__107=107\n"+
			"T__108=108\n"+
			"T__109=109\n"+
			"T__110=110\n"+
			"T__111=111\n"+
			"T__112=112\n"+
			"T__113=113\n"+
			"T__114=114\n"+
			"T__115=115\n"+
			"T__116=116\n"+
			"T__117=117\n"+
			"T__118=118\n"+
			"T__119=119\n"+
			"T__120=120\n"+
			"T__121=121\n"+
			"T__122=122\n"+
			"T__123=123\n"+
			"T__124=124\n"+
			"T__125=125\n"+
			"T__126=126\n"+
			"T__127=127\n"+
			"T__128=128\n"+
			"T__129=129\n"+
			"T__130=130\n"+
			"T__131=131\n"+
			"T__132=132\n"+
			"T__133=133\n"+
			"T__134=134\n"+
			"T__135=135\n"+
			"T__136=136\n"+
			"T__137=137\n"+
			"T__138=138\n"+
			"T__139=139\n"+
			"T__140=140\n"+
			"T__141=141\n"+
			"T__142=142\n"+
			"T__143=143\n"+
			"T__144=144\n"+
			"T__25=25\n"+
			"T__26=26\n"+
			"T__27=27\n"+
			"T__28=28\n"+
			"T__29=29\n"+
			"T__30=30\n"+
			"T__31=31\n"+
			"T__32=32\n"+
			"T__33=33\n"+
			"T__34=34\n"+
			"T__35=35\n"+
			"T__36=36\n"+
			"T__37=37\n"+
			"T__38=38\n"+
			"T__39=39\n"+
			"T__40=40\n"+
			"T__41=41\n"+
			"T__42=42\n"+
			"T__43=43\n"+
			"T__44=44\n"+
			"T__45=45\n"+
			"T__46=46\n"+
			"T__47=47\n"+
			"T__48=48\n"+
			"T__49=49\n"+
			"T__50=50\n"+
			"T__51=51\n"+
			"T__52=52\n"+
			"T__53=53\n"+
			"T__54=54\n"+
			"T__55=55\n"+
			"T__56=56\n"+
			"T__57=57\n"+
			"T__58=58\n"+
			"T__59=59\n"+
			"T__60=60\n"+
			"T__61=61\n"+
			"T__62=62\n"+
			"T__63=63\n"+
			"T__64=64\n"+
			"T__65=65\n"+
			"T__66=66\n"+
			"T__67=67\n"+
			"T__68=68\n"+
			"T__69=69\n"+
			"T__70=70\n"+
			"T__71=71\n"+
			"T__72=72\n"+
			"T__73=73\n"+
			"T__74=74\n"+
			"T__75=75\n"+
			"T__76=76\n"+
			"T__77=77\n"+
			"T__78=78\n"+
			"T__79=79\n"+
			"T__80=80\n"+
			"T__81=81\n"+
			"T__82=82\n"+
			"T__83=83\n"+
			"T__84=84\n"+
			"T__85=85\n"+
			"T__86=86\n"+
			"T__87=87\n"+
			"T__88=88\n"+
			"T__89=89\n"+
			"T__90=90\n"+
			"T__91=91\n"+
			"T__92=92\n"+
			"T__93=93\n"+
			"T__94=94\n"+
			"T__95=95\n"+
			"T__96=96\n"+
			"T__97=97\n"+
			"T__98=98\n"+
			"T__99=99\n";

	@Override
	public InputStream getAntlrTokenFile() {
		ClassLoader classLoader = getClass().getClassLoader();
		return classLoader.getResourceAsStream("io/sarl/lang/idea/parser/antlr/internal/PsiInternalSARL.tokens");
//		return new ByteArrayInputStream(fileContent.getBytes());
	}
}
