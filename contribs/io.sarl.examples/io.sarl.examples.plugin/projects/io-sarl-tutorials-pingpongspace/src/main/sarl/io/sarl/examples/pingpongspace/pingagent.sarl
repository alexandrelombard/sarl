/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-@RELEASE_YEAR@ the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.examples.pingpongspace

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Schedules
import io.sarl.core.Behaviors
import io.sarl.core.OpenEventSpace
import io.sarl.core.OpenEventSpaceSpecification
import io.sarl.core.ExternalContextAccess
import java.util.UUID
import io.sarl.core.Logging

/**
 * @author Stephane Galland.
 */
agent PingAgent {

	uses DefaultContextInteractions, Schedules, Behaviors, Logging, ExternalContextAccess

	var comspace : OpenEventSpace

	on Pong {
		info("Receiving Pong #" + occurrence.index)
		info("Sending Ping #" + (occurrence.index + 1))
		comspace.emit(new Ping(occurrence.index + 1)) [it == occurrence.source]
	}

	on Initialize {
		comspace = defaultContext.getOrCreateSpaceWithSpec(typeof(OpenEventSpaceSpecification),
			occurrence.parameters.get(0) as UUID)

		comspace.register(asEventListener())

		info("Waiting for Pong Agent")
		val task = task("waiting_for_partner")
		task.every(1000) [
			if (comspace.participants.size > 1) {
				info("Pong Agent detected.")
				info("Sending Ping #0")
				var evt = new Ping(0)
				evt.source = comspace.getAddress(getID())

				comspace.emit(evt)
				task.cancel
			}
		]
	}

}
