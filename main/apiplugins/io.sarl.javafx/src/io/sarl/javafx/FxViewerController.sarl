/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.javafx;

import io.sarl.bootstrap.SRE
import io.sarl.core.AgentSpawned
import io.sarl.lang.core.Agent
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.util.OpenEventSpace
import io.sarl.util.OpenEventSpaceSpecification
import java.util.UUID
import javafx.application.Platform
import javafx.^event.ActionEvent
import javafx.fxml.FXML

/** Abstract implementation of a JavaFX viewer controller.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.7
 */
abstract class FxViewerController implements EventListener {

	/** Identifier of the SARL space that is used for supporting the interactions between
	 * the agents and the JavaFX user interface.
	 */
	val id = UUID::randomUUID

	/** Event space for interacting with the agents.
	 */
	volatile var ^space : OpenEventSpace

	/** Emit a kill signal when the application is exited.
	 */
	def safeExit : void {
		emitToAgents(new AppExit)
		this.UISpace = null
	}

	/** Method invoked by the SARL agent to register the object on a space.
	 *
	 * @param space the event space that is used for supporting the interaction between
	 *     the SARL agents and the user interface.
	 */
	def setUISpace(^space : OpenEventSpace) : void {
		var s = this.^space
		s?.unregister(this)
		s = this.^space = ^space
		s?.register(this)
	}

	/** Replies the space for interaction between SARL agents and UI.
	 *
	 * @return the event space that is used for supporting the interaction between
	 *     the SARL agents and the user interface.
	 */
	def getUISpace : OpenEventSpace {
		this.^space
	}

	/** Emit an event to the agents.
	 *
	 * @param event the occurrence to send to agents.
	 */
	def emitToAgents(^event : Event) {
		var s = ^space
		if (s !== null) {
			s.emit(ID, ^event)
		}
	}

	/** Start the agent application.
	 *
	 * @param agentType the type of the agent to launch.
	 * @param whenAgentLaunched the lambda that is called when the agent is really launched.
	 * @return the identifier of the launched agent.
	 */
	def startAgentApplication(agentType : Class<? extends Agent>,
		whenAgentLaunched : () => void) : UUID {
		var bootstrap = SRE::bootstrap
		if (!bootstrap.active) {
			throw new IllegalStateException(Messages::FxViewerController_0)
		}
		var context = bootstrap.startWithoutAgent
		var rootSpace = context.defaultSpace as OpenEventSpace
		this.UISpace = context.createSpace(typeof(OpenEventSpaceSpecification), ID)
		new LaunchingCallback(ID, rootSpace, whenAgentLaunched)
		return bootstrap.startAgent(agentType, this)
	}

	/** Catch exit event from JavaFX. Stop the agents and the JavaFX user interface.
	 *
	 * @param event the JavaFx event that is the source of the exit.
	 */
	@FXML
	def exitApplication(^event : ActionEvent) {
		safeExit
		Platform::exit
	}

	/** Get ID of the object on the space that is used for supporting the interactions between
	 * the agents and the JavaFX user interface.
	 *
	 * @return the identifier of the space.
	 */
	def getID : UUID {
		this.id
	}

	/** Invoked when an event is fired within an agent and received by the JavaFX user interface.
	 *
	 * @param event the occurrence fired by an agent.
	 */
	dispatch def receiveEvent(^event : Event) {
		// Handle all events
	}

	/** Callback for launched agents.
	 *
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * @since 0.7
	 */
	private static class LaunchingCallback implements EventListener {

		val id : UUID

		val rootSpace : OpenEventSpace

		val whenAgentLaunched : ()=>void

		/** Constructor.
		 *
		 * @param id the identifier of the space that is used for supporting the interactions between
		 *     the agents and the JavaFX user interface.
		 * @param whenAgentLaunched the callback lambda expression, that is invoked when an agent is launched.
		 * @param rootSpace the default space in which the first application agent is spawned. This space is usually
		 *     within the same context as the space used for the interactions between the agents and the user interface.
		 */
		new (id : UUID, rootSpace : OpenEventSpace, whenAgentLaunched : ()=>void) {
			this.id = id
			this.whenAgentLaunched = whenAgentLaunched
			this.rootSpace = rootSpace
			this.rootSpace.register(this)
		}

		/** Get ID of the object on the space that is used for supporting the interactions between
		 * the agents and the JavaFX user interface.
		 *
		 * @return the identifier of the space.
		 */
		def getID : UUID {
			this.id
		}

		/** Invoked when an agent-spawned event is fired within the agent application and received by the JavaFX user interface.
		 *
		 * @param event the occurrence fired by the agent application.
		 */
		dispatch def receiveEvent(^event : AgentSpawned) {
			this.rootSpace.unregister(this)
			if (this.whenAgentLaunched !== null) {
				this.whenAgentLaunched.apply
			}
		}

		/** Invoked when an event is fired within an agent and received by the JavaFX user interface.
		 *
		 * @param event the occurrence fired by an agent.
		 */
		dispatch def receiveEvent(^event : Event) {
			// Handle all events without error
		}

	}

}
