/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.experienceindex.eclipse

import org.eclipse.ui.plugin.AbstractUIPlugin
import org.eclipse.jface.resource.ImageDescriptor
import org.eclipse.swt.graphics.Image

/**
 * Plugin.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.6
 */
class SarlExperienceIndexPlugin extends AbstractUIPlugin {

	/** Identifier of the plugin.
	 */
	public static val PLUGIN_ID = "io.sarl.experienceindex.plugin"

	static var instance : SarlExperienceIndexPlugin

	/** Construct an Eclipse plugin.
	 */
	new {
		this.setDefault
	}

	/** Set the default instance of the plugin.
	 *
	 * @param defaultInstance the default plugin instance.
	 */
	static def setDefault(defaultInstance : SarlExperienceIndexPlugin) {
		instance = defaultInstance
	}

	/** Replies the instance of the plugin.
	 *
	 * @return the default plugin instance.
	 */
	static def getDefault : SarlExperienceIndexPlugin {
		instance
	}

	/** Replies the image descriptor for the given image path.
	 *
	 * @param imagePath path of the image.
	 * @return the image descriptor.
	 */
	def getImageDescriptor(imagePath : String) : ImageDescriptor {
		var descriptor = this.imageRegistry.getDescriptor(imagePath)
		if (descriptor === null) {
			descriptor = AbstractUIPlugin::imageDescriptorFromPlugin(PLUGIN_ID, imagePath)
			if (descriptor !== null) {
				this.imageRegistry.put(imagePath, descriptor)
			}
		}
		return descriptor
	}

	/** Replies the image for the given image path.
	 *
	 * @param imagePath path of the image.
	 * @return the image.
	 */
	def getImage(imagePath : String) : Image {
		var descriptor = this.imageRegistry.getDescriptor(imagePath)
		if (descriptor === null) {
			descriptor = AbstractUIPlugin::imageDescriptorFromPlugin(PLUGIN_ID, imagePath)
			if (descriptor !== null) {
				var img = descriptor.createImage
				this.imageRegistry.put(imagePath, img)
				return img
			}
		}
		return null
	}

}
