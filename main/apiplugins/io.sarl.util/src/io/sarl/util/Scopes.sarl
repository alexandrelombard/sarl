/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.util

import java.util.UUID

import io.sarl.lang.core.Address
import io.sarl.lang.core.Scope

/**
 * This class consists exclusively of static methods that operate on or return scopes.
 *
 * @author $Author: srodriguez$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @deprecated since 0.7, replaced by closure expressions.
 */
@Deprecated
final class Scopes {

	static val ALL : Scope<?> = new AlwaysTrueScope

	private new {
	}

	/**
	 * Scope matching all agents in a Space.
	 *
	 * @param <T> - type of the elements in the scope.
	 * @return the scope that corresponds to all.
	 */
	static def allParticipants : Scope<T> with T {
		ALL as Scope<T>
	}

	/** Create an scope restricted to the given addresses.
	 *
	 * @param addresses addresses to put in the scope.
	 * @return the scope restricted to the given addresses.
	 */
	static def addresses(addresses : Address*) : Scope<Address> {
		new AddressScope(addresses)
	}

	/** Create an scope that is forbidding the given addresses.
	 *
	 * @param addresses addresses to exclude from the scope.
	 * @return the scope forbidding the given addresses.
	 * @since 0.5
	 */
	static def notAddresses(addresses : Address*) : Scope<Address> {
		not(addresses(addresses))
	}

	/** Create an scope restricted to the given agent identifiers.
	 *
	 * @param identifiers identifiers to put in the scope.
	 * @return the scope restricted to the given agent identifiers.
	 * @since 0.6
	 */
	static def identifiers(identifiers : UUID*) : Scope<Address> {
		new IdentifierScope(identifiers)
	}

	/** Create an scope that is forbidding the given agent identifiers.
	 *
	 * @param identifiers identifiers to exclude from the scope.
	 * @return the scope forbidding the given identifiers.
	 * @since 0.5
	 */
	static def notIdentifiers(identifiers : UUID*) : Scope<Address> {
		not(identifiers(identifiers))
	}


	/** Create an scope that is the negation of the given scope.
	 *
	 * @param scope the scope to negate.
	 * @return the negative scope.
	 * @since 0.5
	 */
	static def not(scope : Scope<Address>) : Scope<Address> {
		new NotScope(scope)
	}

	/** Create an scope that is the boolean-or of the two given scopes.
	 *
	 * <p>This operation is a short-circuit operation.
	 *
	 * @param scope1 the first scope.
	 * @param scope2 the second scope.
	 * @return the or scope.
	 * @since 0.5
	 */
	static def or(scope1 : Scope<Address>, scope2 : Scope<Address>) : Scope<Address> {
		new OrScope(scope1, scope2)
	}

	/** Create an scope that is the boolean-and of the two given scopes.
	 *
	 * <p>This operation is a short-circuit operation.
	 *
	 * @param scope1 the first scope.
	 * @param scope2 the second scope.
	 * @return the and scope.
	 * @since 0.5
	 */
	static def and(scope1 : Scope<Address>, scope2 : Scope<Address>) : Scope<Address> {
		new AndScope(scope1, scope2)
	}

	/** Create an scope that is the boolean-xor of the two given scopes.
	 *
	 * <p>This operation is a short-circuit operation.
	 *
	 * @param scope1 the first scope.
	 * @param scope2 the second scope.
	 * @return the xor scope.
	 * @since 0.5
	 */
	static def xor(scope1 : Scope<Address>, scope2 : Scope<Address>) : Scope<Address> {
		new XorScope(scope1, scope2)
	}

	/** A scope that is matching all the elements.
	 *
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	private static class AlwaysTrueScope implements Scope<Object> {

		override toString : String {
			"AlwaysTRUE"
		}

		override matches(element : Object) : boolean {
			true
		}

	}

	/** A scope that is matching the negation of the given scope.
	 *
	 * @param <T> - the type of the elements to match to.
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	private static class NotScope<T> implements Scope<T> {

		val scope : Scope<T>

		new (scope : Scope<T>) {
			this.scope = scope
		}

		override toString : String {
			"! " + this.scope.toString
		}

		override matches(element : T) : boolean {
			!this.scope.matches(element)
		}

	}

	/** A scope that is matching the given scopes with a boolean-and operator.
	 *
	 * @param <T> - the type of the elements to match to.
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	private static class AndScope<T> implements Scope<T> {

		val scopes : Scope<T>[]

		@SafeVarargs
		new (scopes : Scope<T>*) {
			this.scopes = scopes
		}

		override toString : String {
			val buffer = new StringBuilder
			val len = this.scopes.length
			if (len > 0) {
				buffer.append(this.scopes.get(0))
				for (i : 1..<len) {
					buffer.append(" && ")
					buffer.append(this.scopes.get(i))
				}
			}
			buffer.toString
		}

		override matches(element : T) : boolean {
			for (scope : this.scopes) {
				if (!scope.matches(element)) {
					return false
				}
			}
			return true
		}

	}

	/** A scope that is matching the given scopes with a boolean-or operator.
	 *
	 * @param <T> - the type of the elements to match to.
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	private static class OrScope<T> implements Scope<T> {

		val scopes : Scope<T>[]

		@SafeVarargs
		new (scopes : Scope<T>*) {
			this.scopes = scopes
		}

		override toString : String {
			val buffer = new StringBuilder
			val len = this.scopes.length
			if (len > 0) {
				buffer.append(this.scopes.get(0))
				for (i : 1..<len) {
					buffer.append(" || ")
					buffer.append(this.scopes.get(i))
				}
			}
			buffer.toString
		}

		override matches(element : T) : boolean {
			for (scope : this.scopes) {
				if (scope.matches(element)) {
					return true
				}
			}
			return false
		}

	}

	/** A scope that is matching the given scopes with a boolean-xor operator.
	 *
	 * @param <T> - the type of the elements to match to.
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	private static class XorScope<T> implements Scope<T> {

		val scopes : Scope<T>[]

		@SafeVarargs
		new (scopes : Scope<T>*) {
			this.scopes = scopes
		}

		override toString : String {
			val buffer = new StringBuilder
			var len = this.scopes.length
			if (len > 0) {
				buffer.append(this.scopes.get(0))
				for (i : 1..<len) {
					buffer.append(" ^ ")
					buffer.append(this.scopes.get(i))
				}
			}
			buffer.toString
		}

		override matches(element : T) : boolean {
			var active = false
			for (scope : this.scopes) {
				if (scope.matches(element)) {
					if (active) {
						return false
					}
					active = true
				}
			}
			active
		}

	}

}
