{
  parserClass="io.sarl.intellij.parser.SarlParser"
  parserUtilClass="io.sarl.intellij.parser.SarlParserUtil"

  implements="io.sarl.intellij.psi.SarlPsiElement"
  extends="io.sarl.intellij.psi.impl.SarlPsiElementImpl"

  psiClassPrefix="Sarl"
  psiImplClassSuffix="Impl"
  psiPackage="io.sarl.intellij.psi"
  psiImplPackage="io.sarl.intellij.psi.impl"

  elementTypeHolderClass="io.sarl.intellij.psi.SarlTypes"
  elementTypePrefix="SARL_"
  elementTypeClass="io.sarl.intellij.psi.SarlPsiElementType"
  tokenTypeClass="io.sarl.intellij.psi.SarlTokenType"


  // make class hierarchy nice and AST tree short
  extends(".*expression")="expression"
  // make expressions stable enough
  pin(".*expression")=1

  // tokens beyond id, number and string
  ADD='+'
  MUL='*'
  DOT='.'
}
root ::= expression *
private recover ::= !(number | string | id)

expression ::= factor add_expression * {recoverUntil="recover"}
private factor ::= primary mul_expression *
private primary ::= literal_expression | reference_expression qreference_expression *

left add_expression ::= '+' factor
left mul_expression ::= '*' primary

identifier ::= id
reference_expression ::= identifier
left qreference_expression ::= '.' identifier {elementType="reference_expression"}

literal_expression ::= number | string