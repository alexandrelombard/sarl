/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.util

import java.util.Arrays

import io.sarl.lang.core.Address
import io.sarl.lang.core.Scope

/**
 * Scope using {@link Address} for EventSpace's.
 *
 * @author $Author: srodriguez$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @Deprecated since 0.7, replaced by closure expressions.
 */
@Deprecated
class AddressScope implements Scope<Address> {

	static val SCOPE_ID = "aid://"

	static val NO_ADDRESS : Address[] = newArrayOfSize(0)

	val addresses : Address[]

	/**
	 * @param addrs addresses to put in the scope.
	 */
	new (addrs : Address*) {
		if (addrs === null) {
			this.addresses = NO_ADDRESS
		} else {
			this.addresses = addrs
		}
	}

	/** Replies the addresses that are matched by this scope.
	 *
	 * @return the addresses.
	 */
	def getAddresses : Address[] {
		this.addresses
	}

	override toString : String {
		SCOPE_ID + Arrays::toString(this.addresses)
	}

	override matches(address : Address) : boolean {
		assert address !== null
		for (element : this.addresses) {
			if (element == address) {
				return true
			}
		}
		return false
	}

	/** Create an scope restricted to the given addresses.
	 *
	 * @param addresses addresses to put in the scope.
	 * @return the scope restricted to the given addresses.
	 * @deprecated see {@link Scopes#addresses(Address...)}.
	 */
	@Deprecated
	static final def getScope(addresses : Address*) : Scope<Address> {
		Scopes::addresses(addresses)
	}

}

