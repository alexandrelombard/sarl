/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.util

import io.sarl.lang.util.SynchronizedCollection
import io.sarl.lang.util.SynchronizedIterable
import io.sarl.lang.util.SynchronizedSet
import io.sarl.util.concurrent.NoReadWriteLock
import java.io.ObjectInputStream
import java.io.ObjectOutputStream
import java.io.Serializable
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.AbstractCollection
import java.util.AbstractSet
import java.util.ArrayList
import java.util.Collection
import java.util.Collections
import java.util.Iterator
import java.util.Set
import java.util.Spliterator
import java.util.Spliterators

/** Utilities on collections.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @deprecated since 0.10, see {@link io.sarl.util.concurrent.Collections3}.
 */
@Deprecated
final class Collections3 {

	/**
	 * The empty set (immutable).  This set is serializable.
	 *
	 * @see #emptySynchronizedSet()
	 */
	public static val EMPTY_SET : SynchronizedSet<Object> = new EmptySet

	private new {
	}

	/** Implementation of an empty set.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	private static class EmptySet extends AbstractSet<Object> implements SynchronizedSet<Object>, Serializable {

		package new {
		}

		override getLock : ReadWriteLock {
			return NoReadWriteLock::SINGLETON
		}

		override iterator : Iterator<Object> {
			Collections::emptyIterator
		}

		override size : int {
			0
		}

		@SuppressWarnings("unused_private_member")
		private def writeObject(stream : ObjectOutputStream) {
			stream.defaultWriteObject
		}

		@SuppressWarnings("unused_private_member")
		private def readObject(stream : ObjectInputStream) {
			stream.defaultReadObject
		}

	}
	
	/** Copied from Collections.
	 *
	 * @param <E> - type of the elements in the collection.
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	private static class SynchronizedCollectionWrapper<E> implements Serializable, SynchronizedCollection<E> {

		/** Backing Collection.
		 */
		package val collection : Collection<E>

		/** Object on which to synchronize.
		 */
		package transient var lock : ReadWriteLock

		new (collection : Collection<E>, lock : ReadWriteLock) {
			assert collection !== null
			assert lock !== null
			this.collection = collection
			this.lock = lock
		}

		override equals(obj : Object) : boolean {
			if (this === obj) {
				return true
			}
			this.lock.readLock.lock
			try {
				return this.collection == obj
			} finally {
				this.lock.readLock.unlock
			}
		}

		override hashCode : int {
			this.lock.readLock.lock
			try {
				return this.collection.hashCode
			} finally {
				this.lock.readLock.unlock
			}
		}

		override size : int {
			this.lock.readLock.lock
			try {
				return this.collection.size
			} finally {
				this.lock.readLock.unlock
			}
		}

		override isEmpty : boolean {
			this.lock.readLock.lock
			try {
				return this.collection.empty
			} finally {
				this.lock.readLock.unlock
			}
		}

		override contains(object : Object) : boolean {
			this.lock.readLock.lock
			try {
				return this.collection.contains(object)
			} finally {
				this.lock.readLock.unlock
			}
		}

		override toArray : Object[] {
			this.lock.readLock.lock
			try {
				return this.collection.toArray
			} finally {
				this.lock.readLock.unlock
			}
		}

		override toArray(output : T[]) : T[] with T {
			this.lock.readLock.lock
			try {
				return this.collection.toArray(output)
			} finally {
				this.lock.readLock.unlock
			}
		}

		override iterator : Iterator<E> {
			// Must be manually synched by user!
			this.collection.iterator
		}

		override add(element : E) : boolean {
			this.lock.writeLock.lock
			try {
				return this.collection.add(element)
			} finally {
				this.lock.writeLock.unlock
			}
		}

		override remove(element : Object) : boolean {
			this.lock.writeLock.lock
			try {
				return this.collection.remove(element)
			} finally {
				this.lock.writeLock.unlock
			}
		}

		override containsAll(coll : Collection<?>) : boolean {
			this.lock.readLock.lock
			try {
				return this.collection.containsAll(coll)
			} finally {
				this.lock.readLock.unlock
			}
		}

		override addAll(coll : Collection<? extends E>) : boolean {
			this.lock.writeLock.lock
			try {
				return this.collection.addAll(coll)
			} finally {
				this.lock.writeLock.unlock
			}
		}

		override removeAll(coll : Collection<?>) : boolean {
			this.lock.writeLock.lock
			try {
				return this.collection.removeAll(coll)
			} finally {
				this.lock.writeLock.unlock
			}
		}

		override retainAll(coll : Collection<?>) : boolean {
			this.lock.writeLock.lock
			try {
				return this.collection.retainAll(coll)
			} finally {
				this.lock.writeLock.lock
			}
		}

		override clear {
			this.lock.writeLock.lock
			try {
				this.collection.clear
			} finally {
				this.lock.writeLock.unlock
			}
		}

		override toString : String {
			this.lock.readLock.lock
			try {
				return this.collection.toString
			} finally {
				this.lock.readLock.unlock
			}
		}

		@SuppressWarnings("unused_private_member")
		private def writeObject(stream : ObjectOutputStream) {
			this.lock.readLock.lock
			try {
				stream.defaultWriteObject
			} finally {
				this.lock.readLock.unlock
			}
		}

		@SuppressWarnings("unused_private_member")
		private def readObject(stream : ObjectInputStream) {
			this.lock.writeLock.lock
			try {
				stream.defaultReadObject
			} finally {
				this.lock.writeLock.unlock
			}
		}

		override getLock : ReadWriteLock {
			this.lock
		}

	}

	/** Iterator that disable modifications on the collection.
	 *
	 * @param <E> the type of the elements in the collection.
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	private static class UnmodifiableIterator<E> implements Iterator<E> {

		val iterator : Iterator<E>

		package new (iterator : Iterator<E>) {
			this.iterator = iterator
		}

		override hasNext : boolean {
			this.iterator.hasNext
		}

		override next : E {
			this.iterator.next
		}

	}

	/** Implementation of a set wrapper that disable modifications.
	 *
	 * @param <E> the type of the elements in the collection.
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	private static class UnmodifiableSetWrapper<E>
			implements Serializable, SynchronizedSet<E> {

		val collection : SynchronizedSet<E>

		package new (set : SynchronizedSet<E>) {
			this.collection = set
		}

		override size : int {
			this.collection.size
		}

		override isEmpty : boolean {
			this.collection.empty
		}

		override contains(object : Object) : boolean {
			this.collection.contains(object)
		}

		override iterator : Iterator<E> {
			new UnmodifiableIterator(this.collection.iterator)
		}

		override toArray : Object[] {
			this.collection.toArray
		}

		override toArray(output : T[]) : T[] with T {
			this.collection.toArray(output)
		}

		override add(element : E) : boolean {
			throw new UnsupportedOperationException
		}

		override remove(element : Object) : boolean {
			throw new UnsupportedOperationException
		}

		override containsAll(collection : Collection<?>) : boolean {
			this.collection.containsAll(collection)
		}

		override addAll(collection : Collection<? extends E>) : boolean {
			throw new UnsupportedOperationException
		}

		override removeAll(collection : Collection<?>) : boolean {
			throw new UnsupportedOperationException
		}

		override retainAll(collection : Collection<?>) : boolean {
			throw new UnsupportedOperationException
		}

		override clear {
			throw new UnsupportedOperationException
		}

		override getLock : ReadWriteLock {
			this.collection.lock
		}

		override spliterator : Spliterator<E> {
        	Spliterators::spliterator(this, Spliterator::DISTINCT)
	    }

	}

	/** Implementation of a synchronized set wrapper that disable modifications.
	 *
	 * @param <E> the type of the elements in the collection.
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	private static class UnmodifiableSynchronizedSetWrapper<E>
			extends SynchronizedSetWrapper<E> {

		package new (set : Set<E>, lock : ReadWriteLock) {
			super(set, lock)
		}

		override add(element : E) : boolean {
			throw new UnsupportedOperationException
		}

		override remove(object : Object) : boolean {
			throw new UnsupportedOperationException
		}

		override addAll(collection : Collection<? extends E>) : boolean {
			throw new UnsupportedOperationException
		}

		override removeAll(collection : Collection<?>) : boolean {
			throw new UnsupportedOperationException
		}

		override retainAll(collection : Collection<?>) : boolean {
			throw new UnsupportedOperationException
		}

		override clear {
			throw new UnsupportedOperationException
		}

		override iterator : Iterator<E> {
			new UnmodifiableIterator(super.iterator)
		}

	}

	/** Copied from Collections.
	 *
	 * @param <E> the type of the elements in the collection.
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	private static class SynchronizedSetWrapper<E>
			extends SynchronizedCollectionWrapper<E>
			implements SynchronizedSet<E> {

		package new (set : Set<E>, lock : ReadWriteLock) {
			super(set, lock)
		}

	}

	/** Implementation of a set with a single element.
	 *
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	private static class SingletonSet<T> extends AbstractSet<T> implements SynchronizedSet<T>, Serializable {

		val singleton : T

		/**
		 * @param singleton the singleton.
		 */
		package new (singleton : T) {
			this.singleton = singleton
		}

		override getLock : ReadWriteLock {
			return NoReadWriteLock::SINGLETON
		}

		override iterator : Iterator<T> {
			Collections::singleton(this.singleton).iterator
		}

		override size : int {
			1
		}

	}

	/**
	 * Returns a synchronized (thread-safe) set backed by the specified
	 * set.  In order to guarantee serial access, it is critical that
	 * <strong>all</strong> access to the backing set is accomplished
	 * through the returned set.
	 *
	 * <p>It is imperative that the user manually synchronize on the returned
	 * set when iterating over it:
	 * <pre>
	 * SynchronizedSet s = Collections3.synchronizedSet(new HashSet(), new ReentrantReadWriteLock());
	 * s.getLock().readLock().lock();
	 * try {
	 *   Iterator i = s.iterator(); // Must be in the synchronized block
	 *   while (i.hasNext())
	 *     foo(i.next());
	 * } finally {
	 *   s.getLock().readLock().unlock();
	 * }
	 * </pre>
	 * Failure to follow this advice may result in non-deterministic behavior.
	 *
	 * <p>The returned set will be serializable if the specified set is
	 * serializable.
	 *
	 * @param <T> - type of the set element.
	 * @param  set the set to be "wrapped" in a synchronized set.
	 * @param lock is the lock to use for synchronizing.
	 * @return a synchronized view of the specified set.
	 */
	static def synchronizedSet(set : Set<T>, lock : ReadWriteLock) : SynchronizedSet<T> with T {
		new SynchronizedSetWrapper(set, lock)
	}

	/**
	 * Returns a synchronized (thread-safe) collection backed by the specified
	 * collection.  In order to guarantee serial access, it is critical that
	 * <strong>all</strong> access to the backing collection is accomplished
	 * through the returned collection.
	 *
	 * <p>It is imperative that the user manually synchronize on the returned
	 * collection when iterating over it:
	 * <pre>
	 * SynchronizedCollection s = Collections3.synchronizedCollection(new ArrayList(), new ReentrantReadWriteLock());
	 * s.getLock().readLock().lock();
	 * try {
	 *   Iterator i = s.iterator(); // Must be in the synchronized block
	 *   while (i.hasNext())
	 *     foo(i.next());
	 * } finally {
	 *   s.getLock().readLock().unlock();
	 * }
	 * </pre>
	 * Failure to follow this advice may result in non-deterministic behavior.
	 *
	 * <p>The returned collection does <i>not</i> pass the <tt>hashCode</tt>
	 * and <tt>equals</tt> operations through to the backing collection, but
	 * relies on <tt>Object</tt>'s equals and hashCode methods.  This is
	 * necessary to preserve the contracts of these operations in the case
	 * that the backing collection is a set or a list.
	 *
	 * <p>The returned collection will be serializable if the specified collection
	 * is serializable.
	 *
	 * @param <T> - type of the set elements.
	 * @param  collection the collection to be "wrapped" in a synchronized collection.
	 * @param lock is the lock to use for synchronizing.
	 * @return a synchronized view of the specified collection.
	 */
	static def synchronizedCollection(collection : Collection<T>, lock : ReadWriteLock) : SynchronizedCollection<T> with T {
		new SynchronizedCollectionWrapper(collection, lock)
	}

	/** Replies an empty synchronized set.
	 *
	 * @param <T> - type of the set element.
	 * @return an empty synchronized set.
	 */
	static def emptySynchronizedSet : SynchronizedSet<T> with T {
		EMPTY_SET as SynchronizedSet<T>
	}

	/** Replies an empty synchronized set.
	 *
	 * @param <T> - type of the element.
	 * @param element the element to put in the singleton.
	 * @return an empty synchronized set.
	 */
	static def synchronizedSingleton(element : T) : SynchronizedSet<T> with T {
		new SingletonSet(element)
	}

	/** Replies an unmodifiable synchronized set.
	 *
	 * <p>It is imperative that the user manually synchronize on the returned
	 * set when iterating over it:
	 * <pre>
	 * SynchronizedSet s = Collections3.unmodifiableSynchronizedSet(anySynchronizedSet);
	 * s.getLock().readLock().lock();
	 * try {
	 *   Iterator i = s.iterator(); // Must be in the synchronized block
	 *   while (i.hasNext())
	 *     foo(i.next());
	 * } finally {
	 *   s.getLock().readLock().unlock();
	 * }
	 * </pre>
	 * Failure to follow this advice may result in non-deterministic behavior.
	 *
	 * @param <T> - type of the elements in the set.
	 * @param elements the set to transform as unmodifiable set.
	 * @return an unmodifiable synchronized set.
	 */
	static def unmodifiableSynchronizedSet(elements : SynchronizedSet<T>) : SynchronizedSet<T> with T {
		new UnmodifiableSetWrapper(elements)
	}

	/**
	 * Returns an immutable synchronized (thread-safe) set backed by the specified
	 * set.  In order to guarantee serial access, it is critical that
	 * <strong>all</strong> access to the backing set is accomplished
	 * through the returned set.
	 *
	 * <p>It is imperative that the user manually synchronize on the returned
	 * set when iterating over it:
	 * <pre>
	 * SynchronizedSet s = Collections3.unmodifiableSynchronizedSet(new HashSet(), new ReentrantReadWriteLock());
	 * s.getLock().readLock().lock();
	 * try {
	 *   Iterator i = s.iterator(); // Must be in the synchronized block
	 *   while (i.hasNext())
	 *     foo(i.next());
	 * } finally {
	 *   s.getLock().readLock().unlock();
	 * }
	 * </pre>
	 * Failure to follow this advice may result in non-deterministic behavior.
	 *
	 * <p>The returned set will be serializable if the specified set is
	 * serializable.
	 *
	 * @param <T> - type of the elements in the set.
	 * @param elements the set to transform as unmodifiable set.
	 * @param lock is the lock to use for synchronizing.
	 * @return an unmodifiable synchronized set.
	 */
	static def unmodifiableSynchronizedSet(elements : Set<T>, lock : ReadWriteLock) : SynchronizedSet<T> with T {
		new UnmodifiableSynchronizedSetWrapper(elements, lock)
	}

	/** 
	 * Returns an immutable synchronized (thread-safe) iterable  backed by the specified
	 * iterable.  In order to guarantee serial access, it is critical that
	 * <strong>all</strong> access to the backing set is accomplished
	 * through the returned set.
	 * 
	 * <p>It is imperative that the user manually synchronize on the returned
	 * iterable when iterating over it:
	 * <pre>
	 * SynchronizedIterable s = Collections3.unmodifiableSynchronizedIterable(new ArrayList(), new ReentrantReadWriteLock());
	 * s.getLock().readLock().lock();
	 * try {
	 *   Iterator i = s.iterator(); // Must be in the synchronized block
	 *   while (i.hasNext())
	 *     foo(i.next());
	 * } finally {
	 *   s.getLock().readLock().unlock();
	 * }
	 * </pre>
	 * Failure to follow this advice may result in non-deterministic behavior.
	 * 
	 * <p>The returned set will be serializable if the specified set is
	 * serializable.
	 * 
	 * @param <T> - type of the elements in the iterable.
	 * @param elements the set to transform as unmodifiable set.
	 * @param lock is the lock to use for synchronizing.
	 * @return an unmodifiable synchronized iterable.
	 */
	static def unmodifiableSynchronizedIterable(elements : Iterable<T>, lock : ReadWriteLock) : SynchronizedIterable<T> with T {
		new UnmodifiableSynchronizedIterableWrapper(elements, lock)
	}

	/** Unmodifiable synchronized iterable.
	 * 
	 * @param <E> the type of the elements in the collection.
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	private static class UnmodifiableSynchronizedIterableWrapper<E> implements SynchronizedIterable<E> {

		val iterable : Iterable<E>

		transient var lock : ReadWriteLock

		package new (iterable : Iterable<E>, lock : ReadWriteLock) {
			assert iterable !== null
			assert lock !== null
			this.iterable = iterable
			this.lock = lock
		}

		override iterator : Iterator<E> {
			new UnmodifiableIterator(this.iterable.iterator)
		}

		override getLock : ReadWriteLock {
			if (this.lock === null) {
				this.lock = new ReentrantReadWriteLock
			}
			return this.lock
		}

		@SuppressWarnings("unused_private_member")
		private def writeObject(stream : ObjectOutputStream) {
			this.lock.readLock.lock
			try {
				stream.defaultWriteObject
			} finally {
				this.lock.readLock.unlock
			}
		}

		@SuppressWarnings("unused_private_member")
		private def readObject(stream : ObjectInputStream) {
			this.getLock.writeLock.lock
			try {
				stream.defaultReadObject
			} finally {
				this.lock.writeLock.unlock
			}
		}

	}

	/** Replies a serializable collection.
	 * If the wrapped collection is serializable, it is replied itself without wrapping.
	 * If the wrapped collection is not serializable, it is wrapped into a collection
	 * that supports serialization of the collection elements.
	 *
	 * @param <T> - type of the elements in the collection.
	 * @param elements the set to transform as unmodifiable collection.
	 * @return an unmodifiable synchronized set.
	 * @since 0.8.6
	 */
	static def serializableCollection(elements : Collection<T>) : Collection<T> with T {
		if (elements instanceof Serializable) {
			return elements
		}
		return new SerializableCollectionWrapper(elements)
	}

	/** Unmodifiable synchronized iterable.
	 * 
	 * @param <E> the type of the elements in the collection.
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * @since 0.8.6
	 */
	private static class SerializableCollectionWrapper<E> extends AbstractCollection<E> implements Serializable {

		transient var collection : Collection<E>

		package new (collection : Collection<E>) {
			this.collection = collection
		}

		override iterator : Iterator<E> {
			this.collection.iterator
		}

		override size : int {
			this.collection.size
		}

		@SuppressWarnings("unused_private_member")
		private def writeObject(stream : ObjectOutputStream) {
			stream.defaultWriteObject
			stream.writeInt(collection.size);
			for (element : this.collection) {
				stream.writeObject(element);
			}
		}

		@SuppressWarnings("unused_private_member")
		private def readObject(stream : ObjectInputStream) {
			stream.defaultReadObject
			val s = stream.readInt
			this.collection = new ArrayList(s)
			for (var i = 0; i < s; i++) {
				this.collection.add(stream.readObject as E)
			}
		}

	}

	/** Implementation of a synchronized collection wrapper that disable modifications.
	 *
	 * @param <E> the type of the elements in the collection.
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * @since 0.10
	 */
	private static class UnmodifiableSynchronizedCollectionWrapper<E>
			extends SynchronizedCollectionWrapper<E> {

		package new (set : Collection<E>, lock : ReadWriteLock) {
			super(set, lock)
		}

		override add(element : E) : boolean {
			throw new UnsupportedOperationException
		}

		override remove(object : Object) : boolean {
			throw new UnsupportedOperationException
		}

		override addAll(collection : Collection<? extends E>) : boolean {
			throw new UnsupportedOperationException
		}

		override removeAll(collection : Collection<?>) : boolean {
			throw new UnsupportedOperationException
		}

		override retainAll(collection : Collection<?>) : boolean {
			throw new UnsupportedOperationException
		}

		override clear {
			throw new UnsupportedOperationException
		}

		override iterator : Iterator<E> {
			new UnmodifiableIterator(super.iterator)
		}

	}

	/**
	 * Returns an immutable synchronized (thread-safe) collection backed by the specified
	 * collection.  In order to guarantee serial access, it is critical that
	 * <strong>all</strong> access to the backing collection is accomplished
	 * through the returned collection.
	 *
	 * <p>It is imperative that the user manually synchronize on the returned
	 * collection when iterating over it:
	 * <pre>
	 * SynchronizedCollection s = Collections3.unmodifiableSynchronizedCollection(new ArrayList(), new ReentrantReadWriteLock());
	 * s.getLock().readLock().lock();
	 * try {
	 *   Iterator i = s.iterator(); // Must be in the synchronized block
	 *   while (i.hasNext())
	 *     foo(i.next());
	 * } finally {
	 *   s.getLock().readLock().unlock();
	 * }
	 * </pre>
	 * Failure to follow this advice may result in non-deterministic behavior.
	 *
	 * @param <T> - type of the elements in the set.
	 * @param elements the set to transform as unmodifiable set.
	 * @param lock is the lock to use for synchronizing.
	 * @return an unmodifiable synchronized set.
	 * @since 0.10
	 */
	static def unmodifiableSynchronizedCollection(elements : Collection<T>, lock : ReadWriteLock) : SynchronizedCollection<T> with T {
		new UnmodifiableSynchronizedCollectionWrapper(elements, lock)
	}

}
